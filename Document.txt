1.Nguy√™n L√≠ ch·ªØ S trong SOLID 
 SRP (Single Responsibility Principle)

 ‚ÄúM·ªói class/module ch·ªâ n√™n c√≥ m·ªôt l√Ω do duy nh·∫•t ƒë·ªÉ thay ƒë·ªïi.‚Äù

N√≥i c√°ch kh√°c: M·ªôt class ch·ªâ t·∫≠p trung gi·∫£i quy·∫øt m·ªôt tr√°ch nhi·ªám duy nh·∫•t.

N·∫øu b·∫°n nh√©t nhi·ªÅu tr√°ch nhi·ªám ‚Üí class d·ªÖ b·ªã ph√¨nh to, kh√≥ b·∫£o tr√¨.

2. √Åp d·ª•ng 
// Class n√†y ch·ªâ lo chuy·ªán g·ª≠i email
public class EmailSender {
    public void send(String to, String message) {
        // code g·ª≠i email
    }
}

Class tr√™n ch·ªâ c√≥ 1 tr√°ch nhi·ªám duy nh·∫•t: g·ª≠i email.
N·∫øu c√≥ rule m·ªõi v·ªÅ email (SMTP, template, retry‚Ä¶) ‚Üí ch·ªâ s·ª≠a class n√†y.
üëâ ƒê√¢y ch√≠nh l√† SRP chu·∫©n ch·ªânh.

II. Nguy√™n L√≠ ch·ªØ O trong SOLID
-Open/Close principle. OCP
-Open for extension, closed for modification 
- C·ªöI M·ªö CHO VI·ªÜC M·ªö R·ªòNG CODE - TH√äM CODE CHO ƒêI·ªÄU CH∆ØA C√ì TR∆Ø·ªöC ƒêO
ƒê√ìNG L·∫†I CHO VI·ªÜC CH·ªàNH S·ª¨A CODE ƒê√É C√ì, TR√ÅNH S·ª¨A CODE C≈® N·∫æU C√ì TH·ªÇ
"N·∫æU C√ì NHU C·∫¶U TH√äM M·ªöI T√çNH NƒÇNG, TH√äM M·ªöI CODE, C·ªê G·∫ÆNG KO ƒê·ª§NG CODE C≈®, M√Ä CH∆†I
ƒêC CODE M·ªöI"
Th√™m code m·ªõi ko s·ª≠a c≈© , v·∫´n ch·∫°y ngon 
- TH√äM T√çNH NƒÇNG G·ª¨I SMS, G·ª¨I WHATSAPP, M√Ä THƒÇNG USERSERVICE KO C·∫¶N CH·ªàNH CODE
M√Ä V·∫™N CH∆†I ƒêC V·ªöI 2 THNG, TH·∫¨M CH√ç L√Ä NHI·ªÄU THƒÇNG M·ªöI H∆†N TRONG T∆Ø∆†NG LAI

>>>HOW ? 
-> thay v√¨ ph·ª• thu·ªôc v√†o c√°i c·ª• th·ªÉ, th√¨ ph·ª• thu·ªôc v√†o chung chung 
** Trong OOP. c√≥ 2 c√°i chung chung ko c·ª• th·ªÉ 
		+ Abstract Class
		+ Interface - l√† 1 d·∫°ng class cha, class ch·ª©a h√†m ko c√≥ code 
				( sau n√†y c√≥ code nh∆∞ng mang √Ω nghƒ©a kh√°c )
>>> 1 class khi vi·∫øt Code, mu·ªën n√≥ th√≠ch ·ª©ng ƒë∆∞·ª£c s·ª± m·ªü r·ªông trong t∆∞∆°ng lai , c·∫•m hard code
-> ph·ª• thu·ªôc v√†o 1 c√°i interface 

public class A{
 private InterfaceB bObj; // dependency 
}

// ch√≠ch qua contructor. setter , Field (Reflection tr√°nh vi ph·∫°m encapsulation)
public A(InterfaceB bObj){
this.bObj = bObj;
}

bObj = new 1 class n√†o c√≥ code, InterfaceB ko ch·ª©a code 
// ph·∫£i c√≥ 1 v√†i class vi·∫øt code cho c√°i InterfaceB , implemtns InterfaceB
// c·ª© th√™m class thu·ªôc InterB l√† ko c·∫ßn s·ª≠a A, m√† A ch∆°i all c√°c class t·ª´ B
// M·ªû class thu·ªôc InterB, ƒë√≥ng v·ªõi vi·ªác ch·ªânh Code class A 

 
